---
import "../styles/global.css";
import "@fontsource/inter/latin-400.css";
import "@fontsource/inter/latin-600.css";
import "@fontsource/lora/400.css";
import "@fontsource/lora/600.css";
import inter400 from "@fontsource/inter/files/inter-latin-400-normal.woff2";
import inter600 from "@fontsource/inter/files/inter-latin-600-normal.woff2";
import lora400 from "@fontsource/lora/files/lora-latin-400-normal.woff2";
import lora600 from "@fontsource/lora/files/lora-latin-600-normal.woff2";
import { ViewTransitions } from "astro:transitions";

interface Props {
  title: string;
  description: string;
  image?: string;
}

const canonicalURL = new URL(Astro.url.pathname, Astro.site);

const { title, description, image = "/nano.png" } = Astro.props;
---

<!-- Global Metadata -->
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<link
  rel="icon"
  type="image/svg+xml"
  href="/favicon-dark.svg"
  media="(prefers-color-scheme: dark)"
/>
<link
  rel="icon"
  type="image/svg+xml"
  href="/favicon-light.svg"
  media="(prefers-color-scheme: light)"
/>
<link rel="icon" type="image/x-icon" href="/favicon-light.svg" />
<meta name="generator" content={Astro.generator} />

<!-- Font preloads -->
<link rel="preload" href={inter400} as="font" type="font/woff2" crossorigin />
<link rel="preload" href={inter600} as="font" type="font/woff2" crossorigin />
<link rel="preload" href={lora400} as="font" type="font/woff2" crossorigin />
<link rel="preload" href={lora600} as="font" type="font/woff2" crossorigin />

<!-- Canonical URL -->
<link rel="canonical" href={canonicalURL} />

<!-- Primary Meta Tags -->
<title>{title}</title>
<meta name="title" content={title} />
<meta name="description" content={description} />

<!-- Open Graph / Facebook -->
<meta property="og:type" content="website" />
<meta property="og:url" content={Astro.url} />
<meta property="og:title" content={title} />
<meta property="og:description" content={description} />
<meta property="og:image" content={new URL(image, Astro.url)} />

<!-- Twitter -->
<meta property="twitter:card" content="summary_large_image" />
<meta property="twitter:url" content={Astro.url} />
<meta property="twitter:title" content={title} />
<meta property="twitter:description" content={description} />
<meta property="twitter:image" content={new URL(image, Astro.url)} />

<ViewTransitions />

<script>
  import type { TransitionBeforeSwapEvent } from "astro:transitions/client";
  document.addEventListener("astro:before-swap", (e) =>
    [
      ...(e as TransitionBeforeSwapEvent).newDocument.head.querySelectorAll(
        'link[as="font"]'
      ),
    ].forEach((link) => link.remove())
  );
</script>

<script is:inline>
  function init() {
    preloadTheme();
    onScroll();
    animate();

    const backToTop = document.getElementById("back-to-top");
    backToTop?.addEventListener("click", (event) => scrollToTop(event));

    const backToPrev = document.getElementById("back-to-prev");
    backToPrev?.addEventListener("click", () => window.history.back());

    const lightThemeButton = document.getElementById("light-theme-button");
    lightThemeButton?.addEventListener("click", () => {
      localStorage.setItem("theme", "light");
      toggleTheme(false);
    });

    const darkThemeButton = document.getElementById("dark-theme-button");
    darkThemeButton?.addEventListener("click", () => {
      localStorage.setItem("theme", "dark");
      toggleTheme(true);
    });

    const systemThemeButton = document.getElementById("system-theme-button");
    systemThemeButton?.addEventListener("click", () => {
      localStorage.setItem("theme", "system");
      toggleTheme(window.matchMedia("(prefers-color-scheme: dark)").matches);
    });

    window
      .matchMedia("(prefers-color-scheme: dark)")
      .addEventListener("change", (event) => {
        if (localStorage.theme === "system") {
          toggleTheme(event.matches);
        }
      });

    document.addEventListener("scroll", onScroll);
  }

  function animate() {
    const animateElements = document.querySelectorAll(".animate");

    animateElements.forEach((element, index) => {
      setTimeout(() => {
        element.classList.add("show");
      }, index * 150);
    });
  }

  function onScroll() {
    if (window.scrollY > 0) {
      document.documentElement.classList.add("scrolled");
    } else {
      document.documentElement.classList.remove("scrolled");
    }
  }

  function scrollToTop(event) {
    event.preventDefault();
    window.scrollTo({
      top: 0,
      behavior: "smooth",
    });
  }

  function toggleTheme(dark) {
    const css = document.createElement("style");

    css.appendChild(
      document.createTextNode(
        `* {
             -webkit-transition: none !important;
             -moz-transition: none !important;
             -o-transition: none !important;
             -ms-transition: none !important;
             transition: none !important;
          }
        `
      )
    );

    document.head.appendChild(css);

    if (dark) {
      document.documentElement.classList.add("dark");
    } else {
      document.documentElement.classList.remove("dark");
    }

    window.getComputedStyle(css).opacity;
    document.head.removeChild(css);
  }

  function preloadTheme() {
    const userTheme = localStorage.theme;

    if (userTheme === "light" || userTheme === "dark") {
      toggleTheme(userTheme === "dark");
    } else {
      toggleTheme(window.matchMedia("(prefers-color-scheme: dark)").matches);
    }
  }

  document.addEventListener("DOMContentLoaded", () => init());
  document.addEventListener("astro:after-swap", () => init());
  preloadTheme();
</script>

<script>
  import { appendCursorGlitch, GlitchEffect } from "./cursors/GlitchEffect";
  document.addEventListener("astro:page-load", () => {
    const css = document.createElement("style");

    css.appendChild(
      document.createTextNode(
        `* {
            box-sizing: border-box;
            cursor: none;
          }
          `
      )
    );

    document.head.appendChild(css);

    appendCursorGlitch();
    let cursor = new GlitchEffect();
    document.onmousemove = function (event) {
      cursor.move(event);
    };
    document.ontouchmove = function (event) {
      cursor.move(event.touches[0]);
    };
    document.onclick = function () {
      if (typeof cursor.click === "function") {
        cursor.click();
      }
    };
  });
</script>

<script is:inline>
  document.addEventListener("astro:before-preparation", () => {
    const preloaderContainer = document.createElement("div");
    preloaderContainer.style.zIndex = "999";
    preloaderContainer.style.position = "absolute";
    preloaderContainer.style.display = "flex";
    preloaderContainer.style.justifyContent = "center";
    preloaderContainer.style.alignItems = "center";
    preloaderContainer.style.width = "100vw";
    preloaderContainer.style.height = "100vh";
    preloaderContainer.style.background =
      "linear-gradient(0deg, rgba(219, 219, 219,0.7) 0%, rgba(219, 219, 219, 0.3) 100%) 0% 0% / cover no-repeat fixed";
    preloaderContainer.style.backgroundSize = "cover";
    preloaderContainer.style.margin = 0;
    preloaderContainer.style.backgroundRepeat = "no-repeat";
    preloaderContainer.style.backgroundAttachment = "fixed";

    const preloader = document.createElement("div");
    preloader.setAttribute("id", "preloader");
    preloaderContainer.appendChild(preloader);

    for (let i = 0; i < 8; i++) {
      let childDiv = document.createElement("div");
      preloader.appendChild(childDiv);
    }
    document.body.appendChild(preloaderContainer);

    // Create the style element
    const preloaderStyle = document.createElement("style");
    preloaderStyle.setAttribute("id", "preloader-style");

    preloaderStyle.innerHTML = `#preloader, #preloader div, #preloader div:after {box-sizing: border-box;}#preloader {display: inline-block;position: relative;width: 80px;height: 80px;}#preloader div {animation: lds-roller 1.2s cubic-bezier(0.5, 0, 0.5, 1) infinite;transform-origin: 40px 40px;}#preloader div:after {content: " ";display: block;position: absolute;width: 7.2px;height: 7.2px;border-radius: 50%;background: currentColor;margin: -3.6px 0 0 -3.6px;}#preloader div:nth-child(1) {animation-delay: -0.036s;}#preloader div:nth-child(1):after {top: 62.62742px;left: 62.62742px;}#preloader div:nth-child(2) {animation-delay: -0.072s;}#preloader div:nth-child(2):after {top: 67.71281px;left: 56px;}#preloader div:nth-child(3) {animation-delay: -0.108s;}#preloader div:nth-child(3):after {top: 70.90963px;left: 48.28221px;}#preloader div:nth-child(4) {animation-delay: -0.144s;}#preloader div:nth-child(4):after {top: 72px;left: 40px;}#preloader div:nth-child(5) {animation-delay: -0.18s;}#preloader div:nth-child(5):after {top: 70.90963px;left: 31.71779px;}#preloader div:nth-child(6) {animation-delay: -0.216s;}#preloader div:nth-child(6):after {top: 67.71281px;left: 24px;}#preloader div:nth-child(7) {animation-delay: -0.252s;}#preloader div:nth-child(7):after {top: 62.62742px;left: 17.37258px;}#preloader div:nth-child(8) {animation-delay: -0.288s;}#preloader div:nth-child(8):after {top: 56px;left: 12.28719px;}@keyframes lds-roller {0% {transform: rotate(0deg);}100% {transform: rotate(360deg);}}`;
    document.head.appendChild(preloaderStyle);
  });

  document.addEventListener("astro:after-preparation", () => {
    document.getElementById("preloader").setAttribute("hidden");
    document.removeChild(
      document.getElementById("preloader-style").parentElement
    );
  });
</script>
